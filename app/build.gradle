apply plugin: 'com.android.application'

apply plugin: 'io.fabric'

apply plugin: "de.mannodermaus.android-junit5"

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: "$project.rootDir/git-version.gradle"

def keystorePropertiesFile = new File(System.getProperty("user.home") + '/android/files/simplesleeptracker/keystore.properties')
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion Versions.compile_sdk
    buildToolsVersion Versions.build_tools

    defaultConfig {
        applicationId "net.erikkarlsson.simplesleeptracker"
        minSdkVersion Versions.min_sdk
        targetSdkVersion Versions.target_sdk
        versionCode Versions.version_code
        versionName Versions.version_name
        testInstrumentationRunner "${applicationId}.runner.TestRunner"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            crunchPngs false
            ext.alwaysUpdateBuildId = false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            applicationIdSuffix = ".dev"
            versionCode 1
            versionName "dev"
            resConfigs "en", "xxhdpi"
        }
        internal {
            versionCode gitVersionCodeTime
            versionName gitVersionName
        }
        playstore {
            versionCode gitVersionCode
            versionName gitVersionName
        }
    }

    kapt {
        javacOptions {
            option("-Xmaxerrs", 500)
        }
    }

    sourceSets {
        String sharedTestJavaDir = 'src/sharedTest/java'

        test {
            java.srcDir sharedTestJavaDir
        }
        androidTest {
            java.srcDir sharedTestJavaDir
        }
    }

    lintOptions {
        lintConfig rootProject.file("code-quality/lint.xml")
        abortOnError true
        warningsAsErrors true
        quiet false
        showAll true
        explainIssues true
        textReport true
    }
}

// Ensure the LeakCanary no-op dependency is always used in JVM and Android tests.
configurations.all { config ->
    if (config.name.contains('UnitTest') || config.name.contains('AndroidTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}

configurations.all() {
    resolutionStrategy.force Deps.kotlin_stdlib
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Dependencies for Android tests
    androidTestImplementation Deps.atsl_runner
    androidTestImplementation Deps.atsl_rules
    androidTestImplementation Deps.room_testing
    androidTestImplementation Deps.arch_core_testing
    androidTestImplementation Deps.junit
    androidTestImplementation Deps.mockito_core, { exclude group: 'net.bytebuddy' }
    androidTestImplementation Deps.dexmaker
    androidTestImplementation Deps.espresso_core
    androidTestImplementation Deps.espresso_contrib
    androidTestImplementation Deps.espresso_intents
    androidTestImplementation Deps.daggermock_android
    androidTestImplementation Deps.daggermock_kotlin
    androidTestImplementation Deps.dagger_runtime
    androidTestImplementation Deps.dagger_android
    androidTestImplementation Deps.dagger_android_support
    kaptAndroidTest Deps.dagger_compiler
    kaptAndroidTest Deps.dagger_android_support_compiler

    // Dependencies for local unit tests
    testImplementation Deps.junit
    testImplementation Deps.hamcrest
    testImplementation Deps.mockito_kotlin
    testImplementation Deps.arch_core_testing
    testImplementation Deps.mockito_inline

    // (Required) Writing and executing Unit Tests on the JUnit Platform.
    testImplementation junit5.unitTests()

    // (Optional) If you need "Parameterized Tests".
    testImplementation junit5.parameterized()

    // (Optional) For running tests inside Android Studio 3
    // Please refer to the "Android Studio Workarounds" section for more insight on this.
    testCompileOnly junit5.unitTestsRuntime()

    // Constraint layout
    implementation Deps.constraint_layout

    // Crashlytics
    implementation Deps.crashlytics

    // Dagger
    implementation Deps.dagger_runtime
    implementation Deps.dagger_android
    implementation Deps.dagger_android_support
    kapt Deps.dagger_compiler
    kapt Deps.dagger_android_support_compiler

    // Firebase
    implementation Deps.firebase_core

    // Guava
    implementation Deps.guava

    // Kotlin
    implementation Deps.kotlin_stdlib
    implementation Deps.core_ktx

    // LeakCanary
    debugImplementation Deps.leakcanary
    releaseImplementation Deps.leakcanary_no_op

    // Lifecycle
    implementation Deps.lifecycle_extensions
    kapt Deps.lifecycle_compiler

    // Multidex
    implementation Deps.multidex

    // Room
    implementation Deps.room_runtime
    implementation Deps.room_rxjava2
    kapt Deps.room_compiler

    // RxJava
    implementation Deps.rxjava2
    implementation Deps.rxandroid
    implementation Deps.rxrelay
    implementation Deps.rxbinding
    implementation Deps.rxkotlin

    // Support libraries
    implementation Deps.support_app_compat
    implementation Deps.support_v4
    implementation Deps.support_design
    implementation Deps.support_cardview

    // ThreeTen Backport
    implementation Deps.threeten_backport

    // Timber
    implementation Deps.timber
}

apply plugin: 'com.google.gms.google-services'