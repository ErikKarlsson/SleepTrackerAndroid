buildscript {

    dependencies {
        classpath Deps.android_gradle_plugin
        classpath Deps.firebase_crashlytics_plugin
        classpath Deps.google_services_plugin
        classpath Deps.kotlin_plugin
        classpath Deps.navigation_plugin
        classpath Deps.play_services_oss_licenses_plugin
        classpath Deps.facebook_screenshot_plugin
        classpath Deps.karumi_shot_plugin
        classpath Deps.dagger_hilt_gradle_plugin
    }

    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.7.2"
    id "com.github.ben-manes.versions" version "0.28.0"
}

detekt {
    toolVersion = "1.7.2"
    input = files("$projectDir")
    config = files("$projectDir/code-quality/detekt.yml")

    reports {
        html.enabled = true
        xml.enabled = true
        txt.enabled = true
    }
}

tasks.detekt.jvmTarget = "1.8"

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://jitpack.io' }
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            apply plugin: "com.github.ben-manes.versions"

            android {
                compileSdkVersion Config.compileSdk

                defaultConfig {
                    minSdkVersion Config.minSdk
                    targetSdkVersion Config.targetSdk
                    testInstrumentationRunner "${applicationId}.runner.TestRunner"
                    testInstrumentationRunnerArgument "listener", "leakcanary.FailTestOnLeakRunListener"
                    vectorDrawables.useSupportLibrary = true

                    javaCompileOptions {
                        annotationProcessorOptions {
                            arguments += ["dagger.hilt.disableModulesHaveInstallInCheck": "true"]
                        }
                    }
                }

                packagingOptions {
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/license.txt'
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/notice.txt'
                    exclude 'META-INF/ASL2.0'
                    exclude 'META-INF/AL2.0'
                    exclude 'META-INF/LGPL2.1'
                    exclude 'org/threeten/bp/format/ChronologyText.properties'
                }

                compileOptions {
                    sourceCompatibility Config.javaVersion
                    targetCompatibility Config.javaVersion
                }

                kotlinOptions {
                    jvmTarget = Config.javaVersion
                    freeCompilerArgs += [
                            "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                            "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi"]
                }

                buildFeatures {
                    viewBinding = true
                }

                flavorDimensions "default"

                productFlavors {
                    dev {
                    }
                    internal {
                    }
                    playstore {
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
